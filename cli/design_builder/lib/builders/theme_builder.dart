import 'dart:io';

import 'package:dart_style/dart_style.dart';
import 'package:recase/recase.dart';

typedef WidgetTheme = Map<String, StringBuffer>;

class ThemeBuilder {
  ThemeBuilder(this.packageName, this.themes);

  final String packageName;
  final List<String> themes;

  Map _themeStructure = {};

  /// This function was generated by AI
  Map<K, dynamic> _deepMerge<K>(Map<K, dynamic> a, Map<K, dynamic> b) {
    final result = Map<K, dynamic>.from(a);

    b.forEach((key, bValue) {
      if (result.containsKey(key)) {
        final aValue = result[key];
        if (aValue is Map && bValue is Map) {
          result[key] = _deepMerge(aValue, bValue);
        } else {
          result[key] = bValue;
        }
      } else {
        result[key] = bValue;
      }
    });

    return result;
  }

  WidgetTheme getTheme(String path, String fileName) {
    ReCase name = ReCase(fileName);
    final file = File('$path/${name.snakeCase}.theme.dart');
    final lines = file.readAsStringSync().split('\n');

    int countLetter(String input, String letter) {
      return letter.isEmpty ? 0 : input.split(letter).length - 1;
    }

    WidgetTheme result = {
      for (final theme in themes) theme: StringBuffer(),
    };

    String? currentTheme;
    int i = 0;

    saveLine(String line) {
      i += countLetter(line, '(');
      i -= countLetter(line, ')');
      if (i == 0) line = line.replaceAll(');', '),');
      result[currentTheme]!.writeln(line);
      if (i == 0) currentTheme = null;
    }

    for (final line in lines) {
      if (currentTheme == null) {
        for (final theme in themes) {
          if (line.contains('$theme = ${name.pascalCase}Style')) {
            currentTheme = theme;
            saveLine(line.split(' = ').last);
          }
        }
      } else {
        saveLine(line);
      }
    }

    for (var theme in themes) {
      if (result[theme]?.isEmpty == true) {
        result[theme] = result['light']!;
      }
    }

    return result;
  }

  void addTheme(String path, String fileName) {
    bool recording = true;

    final newTheme = path.split('/').reversed.fold({}, (buffer, e) {
      if (recording) buffer = {e: fileName == e ? getTheme(path, fileName) : buffer};
      if (e == 'design') recording = false;

      return buffer;
    });

    _themeStructure = _deepMerge(_themeStructure, newTheme);
  }

  void buildThemeModes({required String inputPath, required String outputPath}) {
    print("Building theme modes...");
    Directory(outputPath).createSync();

    for (String theme in themes) {
      // Move default theme
      final file = File('$inputPath${theme}_theme.dart');
      String content = file.readAsStringSync();
      content = content.replaceAll("get ${theme}DesignThemeExtension {}", "");
      content = "import '${theme}_theme_extension.dart';\n$content";

      File('$outputPath${theme}_theme.dart').writeAsStringSync(content);

      // Create theme extension
      final outputFile = File('$outputPath${theme}_theme_extension.dart');
      outputFile.writeAsStringSync(buildTheme(theme));
    }
  }

  String buildTheme(String themeMode) {
    print("Building $themeMode theme...");

    int indent = 0;
    final StringBuffer sb = StringBuffer();
    sb.writeln("import 'package:flutter/material.dart';");
    sb.writeln("import 'package:$packageName/$packageName.dart';");
    sb.writeln("");

    sb.write("DesignTheme get ${themeMode}DesignThemeExtension => ");

    for (final entry in _themeStructure.entries) {
      if (entry.key == 'design') {
        sb.writeln("DesignTheme(");
        _buildStyle(sb, entry.value, indent + 2, themeMode);
      }
      sb.writeln(");");
    }

    final formatter = DartFormatter(languageVersion: DartFormatter.latestLanguageVersion);
    return formatter.format(sb.toString());
  }

  _buildStyle(StringBuffer sb, Map style, int indent, String themeMode) {
    for (final entry in style.entries) {
      final name = ReCase(entry.key);

      if (entry.value.runtimeType.toString() == '_Map<String, StringBuffer>') {
        sb.write("${' ' * indent}${name.camelCase}Style: ");
        sb.writeln(entry.value[themeMode]);
      } else {
        sb.writeln("${' ' * indent}${name.camelCase}Style: ${name.pascalCase}Style(");
        _buildStyle(sb, entry.value, indent + 2, themeMode);
        sb.writeln("${' ' * indent}),");
      }
    }
  }
}
